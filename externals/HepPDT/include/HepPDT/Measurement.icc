// ----------------------------------------------------------------------
//
// Measurement.icc
// author:  Mark Fischler
// ----------------------------------------------------------------------

#include <algorithm>	// swap()

namespace HepPDT {

inline double NaN() {
  // A byte-order-independent way to return a non-signalling NaN
  struct Dib {
    union {
      double d;
      int   i[2];
    } u;
  };
  Dib pos3_2;
  Dib posTwo;
  pos3_2.u.d =  1.5;  // Leading bit of mantissa = 1 --> quiet NaN
  posTwo.u.d =  2.0;
  Dib value;
  value.u.i[0] = pos3_2.u.i[0] | posTwo.u.i[0];
  value.u.i[1] = pos3_2.u.i[1] | posTwo.u.i[1];
  return value.u.d;
}


Measurement::Measurement ( double value, double sigma ) : 
  val(value), sig(sigma)  {}

Measurement::Measurement () : val(NaN()), sig(NaN())  {}

Measurement::Measurement ( const Measurement &m ) : 
  val( m.val ), sig( m.sig )  {}

void Measurement::swap( Measurement & other )
{
  std::swap( val, other.val );
  std::swap( sig, other.sig );
}

Measurement& Measurement::operator = ( Measurement const & rhs )
{
    Measurement temp( rhs );
    swap( temp );
    return *this;
}

bool  Measurement::operator <  ( Measurement const & other ) const
{
  return val < other.val;
}

bool  Measurement::operator == ( Measurement const & other ) const
{
  return val == other.val;
}

double Measurement::value() const { return val; }
double Measurement::sigma() const { return sig; }

Measurement::operator double() const { return value(); }


}  // HepPDT
